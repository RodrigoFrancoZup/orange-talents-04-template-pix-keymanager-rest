Vamos agora testar o endtpoin (controller) que expoões o serviço de Detalhe Chave Pix.
A primeira coisa a ser feita é criar a classe DetakgeChaveControllerTeste, anotada com @MicronautTest. Veja como ficou:
@MicronautTest
internal class DetalheChaveControllerTest{
        
}

Nessa classe vamos ter que criar um client gRPC do serviço de detalhamento, no caso esse serviço se chama Consulta. Vamos mockar esse client, mas para o Micronaut poder injetá-lo foi utilizado uma fábrica (factory), então teremos que na classe de teste criar a seguinte função que irá fazer o papel da factory:
 @Singleton
 @Replaces(KeyManagerConsultaGrpcServiceGrpc.KeyManagerConsultaGrpcServiceBlockingStub::class)
fun stubGrpc(): KeyManagerConsultaGrpcServiceGrpc.KeyManagerConsultaGrpcServiceBlockingStub{
    return Mockito.mock(KeyManagerConsultaGrpcServiceGrpc.KeyManagerConsultaGrpcServiceBlockingStub::class.java)
}

Agora podemos criar o atributo que será o client gRPC, veja:
@field:Inject
lateinit var grpcClient: KeyManagerConsultaGrpcServiceGrpc.KeyManagerConsultaGrpcServiceBlockingStub

Também vamos precisar de um client Http, pois com queremos testar o endpoint que criamos (controller) teremos que fazer uma requisição http. Para isso vamos criar o atributo:
@field:Inject
@field:Client("/")
lateinit var httpClient: HttpClient

Agora podemos começar a escrever as funções de teste. Antes disso, veja como está a classe:

@MicronautTest
internal class DetalheChaveControllerTest{

    @field:Inject
    lateinit var grpcClient: KeyManagerConsultaGrpcServiceGrpc.KeyManagerConsultaGrpcServiceBlockingStub

    @field:Inject
    @field:Client("/")
    lateinit var httpClient: HttpClient

    //Escreva o teste aqui!

    @Singleton
    @Replaces(KeyManagerConsultaGrpcServiceGrpc.KeyManagerConsultaGrpcServiceBlockingStub::class)
   fun stubGrpc(): KeyManagerConsultaGrpcServiceGrpc.KeyManagerConsultaGrpcServiceBlockingStub{
       return Mockito.mock(KeyManagerConsultaGrpcServiceGrpc.KeyManagerConsultaGrpcServiceBlockingStub::class.java)
   }
}

Veja a seguir a classe completinha, com dois testes (um com consulta ok e um com consulta incorreta). Atenção, no teste consulta ok eu tinha que criar um objeto do tipo ConsultaChaveResponse, esse seria o retorno mockado do gRPC Client e por ser grande a sua criação eu isolei o mesmo na função buildGrpcResponse. Veja como ficou:

@MicronautTest
internal class DetalheChaveControllerTest {

    @field:Inject
    lateinit var grpcClient: KeyManagerConsultaGrpcServiceGrpc.KeyManagerConsultaGrpcServiceBlockingStub

    @field:Inject
    @field:Client("/")
    lateinit var httpClient: HttpClient

    @Test
    fun `deve retornar o detalhe da chave pix`() {

        //CENARIO
        val clienteId = "5260263c-a3c1-4727-ae32-3bdb2538841b"
        val pixId = "580ec2b0-86af-4877-aa8c-c7b33da22679"
        val httpRequest = HttpRequest.GET<Any>("/cliente/${clienteId}/pix/${pixId}")

        val grpcRequest = ConsultaChaveRequest.newBuilder()
            .setFiltroPorIds(
                ConsultaChaveRequest.FiltroPorIds.newBuilder()
                    .setIdentificadorCliente(clienteId)
                    .setPixId(pixId)
                    .build()
            )
            .build()

        val grpcReponse = buildGrpcResponse(pixId, clienteId)

        Mockito.`when`(grpcClient.consultaChave(grpcRequest)).thenReturn(grpcReponse)

        //AÇÃO
        val responseHttp = httpClient.toBlocking().exchange(httpRequest, DetalheChaveDto::class.java)

        //VERIFICAÇÃO
        Assertions.assertEquals(HttpStatus.OK, responseHttp.status)
        Assertions.assertEquals(pixId, responseHttp.body()!!.pixId)
        Assertions.assertEquals(clienteId, responseHttp.body()!!.clienteId)
        Assertions.assertEquals("yuri@zup.com.br", responseHttp.body()!!.chave)

    }

    @Test
    fun `deve retonar not found ao querer detalhar chave inexistente`(){

        //CENARIO
        val clienteId = UUID.randomUUID().toString()
        val pixId = UUID.randomUUID().toString()
        val requestHttp = HttpRequest.GET<Any>("/cliente/${clienteId}/pix/${pixId}")

        Mockito.`when`(grpcClient.consultaChave(Mockito.any())).thenThrow(StatusRuntimeException(Status.NOT_FOUND))

        //AÇÃO
       val error = Assertions.assertThrows(HttpClientResponseException::class.java){
           httpClient.toBlocking().exchange(requestHttp, DetalheChaveDto::class.java)
       }

        //VERIFICACAO
        Assertions.assertEquals(HttpStatus.NOT_FOUND, error.status)
    }

    private fun buildGrpcResponse(pixId: String, clienteId: String): ConsultaChaveResponse {
        val instante = LocalDateTime.now().atZone(ZoneId.of("UTC")).toInstant()
        return ConsultaChaveResponse.newBuilder()
            .setConta(
                ContaMessage.newBuilder()
                    .setTipoContaMessage(TipoContaMessage.CONTA_CORRENTE)
                    .setAgencia("123")
                    .setInstituicao("Itau")
                    .setNumero("456")
                    .build()
            )
            .setIdentificadorCliente(clienteId)
            .setPixId(pixId)
            .setTipoChaveMessage(TipoChaveMessage.EMAIL)
            .setTitular(
                TitularMessage.newBuilder()
                    .setCpf("12345678958")
                    .setNome("Yuri")
                    .build()
            )
            .setValorDaChave("yuri@zup.com.br")
            .setCriadoEm(
                Timestamp.newBuilder()
                    .setNanos(instante.nano)
                    .setSeconds(instante.epochSecond)
                    .build()
            )
            .build()

    }

    @Singleton
    @Replaces(KeyManagerConsultaGrpcServiceGrpc.KeyManagerConsultaGrpcServiceBlockingStub::class)
    fun stubGrpc(): KeyManagerConsultaGrpcServiceGrpc.KeyManagerConsultaGrpcServiceBlockingStub {
        return Mockito.mock(KeyManagerConsultaGrpcServiceGrpc.KeyManagerConsultaGrpcServiceBlockingStub::class.java)
    }



