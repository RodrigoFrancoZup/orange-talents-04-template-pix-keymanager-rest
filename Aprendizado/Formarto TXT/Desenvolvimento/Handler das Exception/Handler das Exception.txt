No nosso controller estamos consumindo um serviço externo, por exemplo na classe RegistraChaveController, nela estamos fazendo uma request para o serviço Key-manager-grpc através de um Client de gRPC. Ao consumir um serviço externo podemos ter dois cenários, o de sucesso ou de erro. Quando um erro ocorre devemos fazer alguma coisa, ou seja, devemos tratar esse erro, e em nossa aplicação será apenas informar de forma amigável o usuário sobre o ocorrido.
Tente cadastar uma chave pix com valor repetido e você terá a responsta com Http Status 500, pois a API gRPC está lançando StatusRuntimeException quando alguem tenta cadastrar chave com valor repetido.
Vamos criar um Handler de Exception, nele vamos pegar as StatusRuntimeException lançadas pela API gRPC e mapear para respostas de HTTP Status equivalentes.

Para criar o Handler siga o passo a passo:

1) Criar uma classe com nome qualquer, no meu caso chamei de GlobalExceptionHandler e anotá-la com @Singleton. Essa classe deve implementar a interface ExceptionHandler<> e nesse diamantes devemos por o tipo de exception que queremos capturar e como vamos responder, no nosso caso ficou ExceptionHandler<StatusRuntimeException, HttpResponse<Any>>. Após isso teremos que implementar o método que herdamos da interface. Veja como ficou a classe (ainda sem implementação):
@Singleton
class GlobalStatusExceptionHandler: ExceptionHandler<StatusRuntimeException, HttpResponse<Any>> {

    override fun handle(request: HttpRequest<*>?, exception: StatusRuntimeException): HttpResponse<Any> {
        TODO("Not yet implemented")
    }
}

Veja como ficou a implementação:

@Singleton
class GlobalStatusExceptionHandler: ExceptionHandler<StatusRuntimeException, HttpResponse<Any>> {

    override fun handle(request: HttpRequest<*>?, exception: StatusRuntimeException): HttpResponse<Any> {

        //Pegando o código da excpetion lançada
        val statusCode = exception.status.code

        //Pegando a mensagem da excpetion lançada. Caso seja Nula vamos por mensagem vazia.
        val statusDescription = exception.status.description ?: ""

        //Pegamos o código da exeception para analisar no when(statusCode)
        //Para cada código da execetpion vamos adicionar no mapa um HttpStatus e uma mensagem
        val (httpStatus, message) = when (statusCode) {
            Status.NOT_FOUND.code -> Pair(HttpStatus.NOT_FOUND, statusDescription)
            Status.INVALID_ARGUMENT.code -> Pair(HttpStatus.BAD_REQUEST, "Dados da requisição estão inválidos")
            Status.ALREADY_EXISTS.code -> Pair(HttpStatus.UNPROCESSABLE_ENTITY, statusDescription)
            else ->  {
                Pair(HttpStatus.INTERNAL_SERVER_ERROR, "Nao foi possivel completar a requisição devido ao erro: ${statusDescription} (${statusCode})")
            }
        }

        //Aqui vamos retornar o erro ao usuario, será atraves do HttpResponse,
        // no seu status vamos colocar Status HTTP que já foi mapeado, e no body vamos colocar a mensagem que já foi mapeada!
        return HttpResponse
            .status<JsonError>(httpStatus)
            .body(JsonError(message))
    }
}

Agora já estamos tratando as Exception do tipo Status que o gRPC lança e devolvendo uma mensagem amigável ao Usuário.
